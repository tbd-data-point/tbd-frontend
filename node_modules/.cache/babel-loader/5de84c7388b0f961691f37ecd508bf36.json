{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = whilst;\n\nvar noop = function noop() {};\n/**\n * Repeatedly call fn, while test returns true. Calls callback when stopped, or an error occurs.\n *\n * @param {Function} test Synchronous truth test to perform before each execution of fn.\n * @param {Function} fn A function which is called each time test passes. The function is passed a callback(err), which must be called once it has completed with an optional err argument.\n * @param {Function} callback A callback which is called after the test fails and repeated execution of fn has stopped.\n */\n\n\nfunction whilst(test, iterator) {\n  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n  if (test()) {\n    iterator(function next(err) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (err) {\n        callback(err);\n      } else if (test.apply(this, args)) {\n        iterator(next);\n      } else {\n        callback(null);\n      }\n    });\n  } else {\n    callback(null);\n  }\n}","map":{"version":3,"sources":["/Users/krystiannowak/Documents/tbd/node_modules/react-textfit/lib/utils/whilst.js"],"names":["Object","defineProperty","exports","value","default","whilst","noop","test","iterator","callback","arguments","length","undefined","next","err","_len","args","Array","_key","apply"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AACA,IAAIC,IAAI,GAAG,SAASA,IAAT,GAAgB,CAAE,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASD,MAAT,CAAgBE,IAAhB,EAAsBC,QAAtB,EAAgC;AAC5B,MAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEJ,IAAnF;;AAEA,MAAIC,IAAI,EAAR,EAAY;AACRC,IAAAA,QAAQ,CAAC,SAASK,IAAT,CAAcC,GAAd,EAAmB;AACxB,WAAK,IAAIC,IAAI,GAAGL,SAAS,CAACC,MAArB,EAA6BK,IAAI,GAAGC,KAAK,CAACF,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAvB,CAAzC,EAAoEG,IAAI,GAAG,CAAhF,EAAmFA,IAAI,GAAGH,IAA1F,EAAgGG,IAAI,EAApG,EAAwG;AACpGF,QAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBR,SAAS,CAACQ,IAAD,CAA1B;AACH;;AAED,UAAIJ,GAAJ,EAAS;AACLL,QAAAA,QAAQ,CAACK,GAAD,CAAR;AACH,OAFD,MAEO,IAAIP,IAAI,CAACY,KAAL,CAAW,IAAX,EAAiBH,IAAjB,CAAJ,EAA4B;AAC/BR,QAAAA,QAAQ,CAACK,IAAD,CAAR;AACH,OAFM,MAEA;AACHJ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,KAZO,CAAR;AAaH,GAdD,MAcO;AACHA,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = whilst;\nvar noop = function noop() {};\n\n/**\n * Repeatedly call fn, while test returns true. Calls callback when stopped, or an error occurs.\n *\n * @param {Function} test Synchronous truth test to perform before each execution of fn.\n * @param {Function} fn A function which is called each time test passes. The function is passed a callback(err), which must be called once it has completed with an optional err argument.\n * @param {Function} callback A callback which is called after the test fails and repeated execution of fn has stopped.\n */\n\nfunction whilst(test, iterator) {\n    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n    if (test()) {\n        iterator(function next(err) {\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n            }\n\n            if (err) {\n                callback(err);\n            } else if (test.apply(this, args)) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        });\n    } else {\n        callback(null);\n    }\n}"]},"metadata":{},"sourceType":"script"}