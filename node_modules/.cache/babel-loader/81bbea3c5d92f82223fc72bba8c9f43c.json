{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction isSticky() {\n  _s();\n\n  const [isSticky, setSticky] = useState(false);\n  const element = useRef(null);\n\n  const handleScroll = () => {\n    window.scrollY > element.current.getBoundingClientRect().bottom ? setSticky(true) : setSticky(false);\n  }; // This function handles the scroll performance issue\n\n\n  const debounce = (func, wait = 20, immediate = true) => {\n    let timeOut;\n    return () => {\n      let context = this,\n          args = arguments;\n\n      const later = () => {\n        timeOut = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      const callNow = immediate && !timeOut;\n      clearTimeout(timeOut);\n      timeOut = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', debounce(handleScroll));\n    return () => {\n      window.removeEventListener('scroll', () => handleScroll);\n    };\n  }, [debounce, handleScroll]);\n  return {\n    isSticky,\n    element\n  };\n}\n\n_s(isSticky, \"LZR3uTxto6+Bh+TvKd7BTAN08Qg=\");\n\nexport default useSticky;","map":{"version":3,"sources":["/Users/krystiannowak/Documents/tbd/src/components/isSticky.js"],"names":["useState","useRef","useEffect","isSticky","setSticky","element","handleScroll","window","scrollY","current","getBoundingClientRect","bottom","debounce","func","wait","immediate","timeOut","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","addEventListener","removeEventListener","useSticky"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACA,QAAD,EAAWC,SAAX,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMK,OAAO,GAAGJ,MAAM,CAAC,IAAD,CAAtB;;AAEA,QAAMK,YAAY,GAAG,MAAM;AACzBC,IAAAA,MAAM,CAACC,OAAP,GAAiBH,OAAO,CAACI,OAAR,CAAgBC,qBAAhB,GAAwCC,MAAzD,GACIP,SAAS,CAAC,IAAD,CADb,GAEIA,SAAS,CAAC,KAAD,CAFb;AAGD,GAJD,CAJkB,CAUlB;;;AACA,QAAMQ,QAAQ,GAAG,CAACC,IAAD,EAAOC,IAAI,GAAG,EAAd,EAAkBC,SAAS,GAAG,IAA9B,KAAuC;AACtD,QAAIC,OAAJ;AACA,WAAO,MAAM;AACX,UAAIC,OAAO,GAAG,IAAd;AAAA,UACEC,IAAI,GAAGC,SADT;;AAEA,YAAMC,KAAK,GAAG,MAAM;AAClBJ,QAAAA,OAAO,GAAG,IAAV;AACA,YAAI,CAACD,SAAL,EAAgBF,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACjB,OAHD;;AAIA,YAAMI,OAAO,GAAGP,SAAS,IAAI,CAACC,OAA9B;AACAO,MAAAA,YAAY,CAACP,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAGQ,UAAU,CAACJ,KAAD,EAAQN,IAAR,CAApB;AACA,UAAIQ,OAAJ,EAAaT,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACd,KAXD;AAYD,GAdD;;AAgBAhB,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkCb,QAAQ,CAACN,YAAD,CAA1C;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACmB,mBAAP,CAA2B,QAA3B,EAAqC,MAAMpB,YAA3C;AACD,KAFD;AAGD,GALQ,EAKN,CAACM,QAAD,EAAWN,YAAX,CALM,CAAT;AAOA,SAAO;AAAEH,IAAAA,QAAF;AAAYE,IAAAA;AAAZ,GAAP;AACD;;GAnCQF,Q;;AAqCT,eAAewB,SAAf","sourcesContent":["import { useState, useRef, useEffect } from 'react'\n\nfunction isSticky() {\n  const [isSticky, setSticky] = useState(false)\n  const element = useRef(null)\n\n  const handleScroll = () => {\n    window.scrollY > element.current.getBoundingClientRect().bottom\n      ? setSticky(true)\n      : setSticky(false)\n  }\n\n  // This function handles the scroll performance issue\n  const debounce = (func, wait = 20, immediate = true) => {\n    let timeOut\n    return () => {\n      let context = this,\n        args = arguments\n      const later = () => {\n        timeOut = null\n        if (!immediate) func.apply(context, args)\n      }\n      const callNow = immediate && !timeOut\n      clearTimeout(timeOut)\n      timeOut = setTimeout(later, wait)\n      if (callNow) func.apply(context, args)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', debounce(handleScroll))\n    return () => {\n      window.removeEventListener('scroll', () => handleScroll)\n    }\n  }, [debounce, handleScroll])\n\n  return { isSticky, element }\n}\n\nexport default useSticky\n"]},"metadata":{},"sourceType":"module"}