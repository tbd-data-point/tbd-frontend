[{"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\index.tsx":"1","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\App.tsx":"2","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\Routes.tsx":"3","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\index.tsx":"4","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Login.tsx":"5","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Signup.tsx":"6","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\LandingPage.tsx":"7","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Solutions.tsx":"8","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Resources.tsx":"9","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\WorkerSettings.tsx":"10","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Industries.tsx":"11","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\TestPage.tsx":"12","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\OffersList.tsx":"13","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\Navbar.tsx":"14","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\AppSearch.tsx":"15","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\Footer.tsx":"16","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\Sidebar.tsx":"17","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\Offer_min.tsx":"18","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\UploadOffer.tsx":"19","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\UploadModal.tsx":"20","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\UploadInlineBlock.tsx":"21"},{"size":529,"mtime":1616151044000,"results":"22","hashOfConfig":"23"},{"size":222,"mtime":1616151042000,"results":"24","hashOfConfig":"23"},{"size":846,"mtime":1616840841400,"results":"25","hashOfConfig":"23"},{"size":526,"mtime":1616840898313,"results":"26","hashOfConfig":"23"},{"size":2405,"mtime":1616151044000,"results":"27","hashOfConfig":"23"},{"size":3886,"mtime":1616151044000,"results":"28","hashOfConfig":"23"},{"size":5160,"mtime":1616151044000,"results":"29","hashOfConfig":"23"},{"size":104,"mtime":1616151044000,"results":"30","hashOfConfig":"23"},{"size":3377,"mtime":1616151044000,"results":"31","hashOfConfig":"23"},{"size":791,"mtime":1616151096000,"results":"32","hashOfConfig":"23"},{"size":107,"mtime":1616151044000,"results":"33","hashOfConfig":"23"},{"size":1140,"mtime":1617034957412,"results":"34","hashOfConfig":"23"},{"size":1972,"mtime":1616340260000,"results":"35","hashOfConfig":"23"},{"size":4035,"mtime":1616151044000,"results":"36","hashOfConfig":"23"},{"size":3666,"mtime":1616151096000,"results":"37","hashOfConfig":"23"},{"size":4487,"mtime":1616151096000,"results":"38","hashOfConfig":"23"},{"size":1209,"mtime":1616151096000,"results":"39","hashOfConfig":"23"},{"size":2468,"mtime":1616344734000,"results":"40","hashOfConfig":"23"},{"size":9949,"mtime":1617128388976,"results":"41","hashOfConfig":"23"},{"size":11019,"mtime":1617034984333,"results":"42","hashOfConfig":"23"},{"size":7982,"mtime":1617057189759,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"mwis2c",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\index.tsx",[],["91","92"],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\App.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\Routes.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\index.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Login.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Signup.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\LandingPage.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Solutions.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Resources.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\WorkerSettings.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\Industries.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\TestPage.tsx",["93","94","95","96"],"import styled from \"styled-components\"\r\nimport UploadModal from \"../components/UploadModal\"\r\n\r\nconst Wrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: #white;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: -1000;\r\n`\r\nconst Label = styled.div`\r\n    width: 300px;\r\n    height: 100px;\r\n    font-size: 28px;\r\n    color: black;\r\n    background: white;\r\n    font-family: Futura;\r\n    z-index: 1000;\r\n`\r\n\r\nconst Accordion = styled.div`\r\n    width: 300px;\r\n    height: 100px;\r\n    background: white;\r\n    position: absolute;\r\n    top: 10px;\r\n`\r\n\r\nconst AccordionWrapper = styled.div`\r\n    position: relative;\r\n`\r\n\r\nconst TestPage = () => {\r\n    const test = () => {\r\n        console.log(1)\r\n    }\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <UploadModal\r\n                    data={{\r\n                        id: \"1\",\r\n                        type: \"modal\",\r\n                        sample: true,\r\n                        display: true,\r\n                    }}\r\n                />\r\n            </Wrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestPage\r\n","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\OffersList.tsx",["97","98"],"import AppSearch from '../components/AppSearch'\r\nimport Footer from '../components/Footer'\r\nimport styled from 'styled-components'\r\nimport OfferMin from '../components/Offer_min'\r\nimport axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst OfferListWrapper = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: space-evenly;\r\n\talign-items: center;\r\n\twidth: 80%;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tmargin-top: 10px;\r\n\tmargin-bottom: 100px;\r\n\theight: 1000px;\r\n`\r\n\r\nconst OffersList = () => {\r\n\tconst [offers, setOffers] = useState([\r\n\t\t{\r\n\t\t\tdesc:\r\n\t\t\t\t'Minions ipsum potatoooo hahaha ti aamoo! Poulet tikka masala. Butt para tú me want bananaaa! Belloo! Potatoooo. Hana dul sae jeje chasy bee do bee do bee do. Para tú poopayee baboiii chasy. Potatoooo chasy jeje po kass. Gelatooo me want bananaaa! Uuuhhh daa. Poulet tikka masala wiiiii ti aamoo! Jiji tulaliloo wiiiii hahaha baboiii underweaaar.',\r\n\t\t\timgLink: ['1.jpg', '2.jpg'],\r\n\t\t\ttitle: 'Pierwsza oferta',\r\n\t\t\tid: '1',\r\n\t\t},\r\n\t\t{\r\n\t\t\tdesc:\r\n\t\t\t\t'Minions ipsum potatoooo hahaha ti aamoo! Poulet tikka masala. Butt para tú me want bananaaa! Belloo! Potatoooo. Hana dul sae jeje chasy bee do bee do bee do. Para tú poopayee baboiii chasy. Potatoooo chasy jeje po kass. Gelatooo me want bananaaa! Uuuhhh daa. Poulet tikka masala wiiiii ti aamoo! Jiji tulaliloo wiiiii hahaha baboiii underweaaar.',\r\n\t\t\timgLink: ['1.jpg', '2.jpg'],\r\n\t\t\ttitle: 'Pierwsza oferta',\r\n\t\t\tid: '1',\r\n\t\t},\r\n\t])\r\n\tuseEffect(() => {\r\n\t\t// axios\r\n\t\t// \t.get('http://localhost:5000/offers/')\r\n\t\t// \t.then((res) => {\r\n\t\t// \t\tsetOffers(res.data)\r\n\t\t// \t})\r\n\t\t// \t.catch((err) => {\r\n\t\t// \t\tsetOffers([])\r\n\t\t// \t\tconsole.log(err)\r\n\t\t// \t})\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppSearch />\r\n\t\t\t<OfferListWrapper>\r\n\t\t\t\t{offers.map((e: any) => {\r\n\t\t\t\t\tconsole.log(e)\r\n\t\t\t\t\treturn <OfferMin data={e}></OfferMin>\r\n\t\t\t\t})}\r\n\t\t\t</OfferListWrapper>\r\n\t\t\t<Footer />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default OffersList\r\n","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\Navbar.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\AppSearch.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\Footer.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\Sidebar.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\Offer_min.tsx",[],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\views\\UploadOffer.tsx",["99","100","101","102"],"C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\UploadModal.tsx",["103","104","105"],"import { useRef, useState } from \"react\"\r\nimport axios from \"axios\"\r\nimport styled from \"styled-components\"\r\nimport upload from \"../assets/img/upload.svg\"\r\nimport cross from \"../assets/img/cross.svg\"\r\n\r\n//TODO: Add prev, next arrow photos for file preview\r\n//This might be of use: https://blog.logrocket.com/create-a-drag-and-drop-component-with-react-dropzone/\r\n\r\ntype PropsType = {\r\n    data: {\r\n        sample: boolean\r\n        id: string\r\n        display: boolean\r\n        type: string\r\n    }\r\n}\r\n\r\nconst ModalWrapper = styled.div<ShowModal>`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0, 0, 0, 0.87);\r\n    z-index: 10;\r\n    display: none;\r\n    justify-content: center;\r\n    align-items: center;\r\n    ${(props) =>\r\n        props.isDisplay === true &&\r\n        `\r\n\t\tdisplay: flex;\r\n\t\t\r\n\t`}\r\n`\r\n\r\nconst Bcg = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    z-index: -10;\r\n`\r\n\r\nconst FilePreviewBcg = styled.div`\r\n    display: none;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    z-index: 1000;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    flex-direction: row;\r\n\r\n    & > div > .previewArrow {\r\n        clip-path: polygon(25% 0, 100% 50%, 25% 100%, 0% 100%, 75% 50%, 0% 0%);\r\n        z-index: 1100;\r\n        background-color: white;\r\n        width: 28px;\r\n        height: 50px;\r\n        transition: all 0.1s;\r\n    }\r\n\r\n    & > div > .previewArrow:hover {\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    & > .previewArrowBcg {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 50px;\r\n        height: 60px;\r\n        margin-left: 50px;\r\n        margin-right: 50px;\r\n        cursor: pointer;\r\n    }\r\n`\r\nconst PreviewBcg = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    z-index: -10;\r\n`\r\n\r\nconst FilePreview = styled.img`\r\n    max-width: 60%;\r\n    max-height: 80%;\r\n`\r\n\r\nconst ModalBody = styled.div`\r\n    width: 700px;\r\n    min-height: 500px;\r\n    background-color: white;\r\n    border-radius: 5px;\r\n    border: 1px solid black;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    padding: 30px;\r\n`\r\nconst ModalTitle = styled.h1`\r\n    width: 100%;\r\n    margin-top: 0px;\r\n    margin-bottom: 10px;\r\n    text-align: center;\r\n`\r\nconst ModalInput = styled.div`\r\n    width: 100%;\r\n    height: 250px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    transition: all 0.2s;\r\n    &:hover {\r\n        cursor: pointer;\r\n        background-color: whitesmoke;\r\n    }\r\n`\r\nconst FileInput = styled.input`\r\n    display: none;\r\n    width: 100%;\r\n    height: 100%;\r\n`\r\n\r\nconst ModalList = styled.div`\r\n    width: 98%;\r\n`\r\nconst ModalFooter = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    padding: 40px;\r\n    padding-bottom: 0px;\r\n`\r\n\r\nconst SelectedFile = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    & > p:hover {\r\n        color: blue;\r\n        cursor: pointer;\r\n        text-decoration: underline;\r\n    }\r\n\r\n    & > div {\r\n        width: 11px;\r\n        height: 11px;\r\n        cursor: pointer;\r\n    }\r\n\r\n    & > div:hover {\r\n        cursor: pointer;\r\n    }\r\n\r\n    & > div > img:active {\r\n        color: red;\r\n    }\r\n`\r\n\r\nconst Button = styled.button<ButtonStyled>`\r\n    margin-left: 35px;\r\n    font-size: 15px;\r\n    width: 110px;\r\n    height: 35px;\r\n    border: 1px solid black;\r\n    border-radius: 1px;\r\n    box-shadow: 0px 1px 4px 0.1px gray;\r\n    transition: 0.1s all;\r\n    &:hover {\r\n        transform: scale(1.005);\r\n        cursor: pointer;\r\n    }\r\n    ${(props) =>\r\n        props.upload &&\r\n        `\r\n            background-color: #04383b;\r\n            color: whitesmoke;\r\n        `};\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`\r\n\r\ninterface ButtonStyled {\r\n    upload?: boolean\r\n}\r\n\r\ninterface ShowModal {\r\n    isDisplay?: boolean\r\n}\r\n\r\nconst FilePreviewComponent = ({ preview, setPreview, previewImage, selectedFiles }: any) => {\r\n    return (\r\n        <FilePreviewBcg style={{ display: preview.src ? \"flex\" : \"none\" }}>\r\n            <PreviewBcg onClick={() => setPreview({ index: null, src: null })}></PreviewBcg>\r\n            <div\r\n                className={\"previewArrowBcg\"}\r\n                onClick={() =>\r\n                    preview.index - 1 < 0 ? previewImage(selectedFiles.length - 1) : previewImage(preview.index - 1)\r\n                }>\r\n                <div className={\"previewArrow\"} style={{ transform: \"rotate(180deg)\" }}></div>\r\n            </div>\r\n            <FilePreview src={preview.src}></FilePreview>\r\n            <div\r\n                className={\"previewArrowBcg\"}\r\n                onClick={() =>\r\n                    preview.index + 1 > selectedFiles.length - 1 ? previewImage(0) : previewImage(preview.index + 1)\r\n                }>\r\n                <div className={\"previewArrow\"}></div>\r\n            </div>\r\n        </FilePreviewBcg>\r\n    )\r\n}\r\n\r\nconst ModalBodyComponent = ({\r\n    openFileBrowser,\r\n    fileInput,\r\n    fileInputDOM,\r\n    selectedFiles,\r\n    previewImage,\r\n    deleteFile,\r\n    uploadHandler,\r\n    setDisplay,\r\n    type,\r\n}: any) => {\r\n    return (\r\n        <ModalBody>\r\n            <ModalTitle>Upload Files</ModalTitle>\r\n            <ModalInput onClick={openFileBrowser}>\r\n                <FileInput type={\"file\"} ref={fileInputDOM} onChange={fileInput} multiple></FileInput>\r\n                <img alt={\"\"} src={upload} width={\"60px\"} style={{ marginBottom: \"5px\", marginTop: \"20px\" }}></img>\r\n                <p>Drag and drop your files anywhere on screen</p>\r\n            </ModalInput>\r\n            <ModalList>\r\n                {selectedFiles.map((e: any, i: number) => {\r\n                    return (\r\n                        <SelectedFile key={i}>\r\n                            <p\r\n                                onClick={() => {\r\n                                    previewImage(i)\r\n                                }}>\r\n                                {e.name}\r\n                            </p>\r\n                            <div\r\n                                onClick={() => {\r\n                                    deleteFile(i)\r\n                                }}>\r\n                                <img alt={\"\"} src={cross} width={\"11px\"}></img>\r\n                            </div>\r\n                        </SelectedFile>\r\n                    )\r\n                })}\r\n            </ModalList>\r\n            <ModalFooter>\r\n                <Button upload onClick={type == \"modal\" ? uploadHandler : null}>\r\n                    Upload\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setDisplay(false)}\r\n                    style={{ display: type === \"modal\" ? \"inline-block\" : \"none\" }}>\r\n                    Cancel\r\n                </Button>\r\n            </ModalFooter>\r\n        </ModalBody>\r\n    )\r\n}\r\n\r\nconst UploadModal = (props: PropsType) => {\r\n    const [selectedFiles, setSelectedFiles] = useState<any>([])\r\n    const [preview, setPreview] = useState<any>({ index: null, src: null })\r\n    const fileInputDOM = useRef<HTMLInputElement>(null)\r\n    const [display, setDisplay] = useState<any>(props.data.display)\r\n\r\n    const dragOver = (e: any) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    const dragEnter = (e: any) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    const dragLeave = (e: any) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    const fileDrop = (e: any) => {\r\n        e.preventDefault()\r\n        const files = [...e.dataTransfer.files].concat(selectedFiles)\r\n        const flags = new Set()\r\n        const output = files.filter((e) => {\r\n            if (flags.has(e.name)) {\r\n                return false\r\n            }\r\n            flags.add(e.name)\r\n            return true\r\n        })\r\n\r\n        setSelectedFiles(output)\r\n    }\r\n\r\n    const deleteFile = (index: number) => {\r\n        const files = selectedFiles\r\n        files.splice(index, 1)\r\n        setSelectedFiles([...files])\r\n    }\r\n\r\n    const openFileBrowser = () => {\r\n        if (fileInputDOM && fileInputDOM.current) {\r\n            fileInputDOM.current.click()\r\n        }\r\n    }\r\n\r\n    const fileInput = (e: any) => {\r\n        fileDrop({\r\n            dataTransfer: e.target,\r\n            preventDefault: function () {\r\n                return null\r\n            },\r\n        })\r\n    }\r\n\r\n    const uploadHandler = () => {\r\n        const dataToUpload = new FormData()\r\n        dataToUpload.append(\"project\", props.data.id)\r\n        dataToUpload.append(\"sample\", \"\" + props.data.sample)\r\n        selectedFiles.forEach((e: any) => {\r\n            dataToUpload.append(e.name, e)\r\n        })\r\n        axios\r\n            .post(\"http://localhost:5000/api/uploadFiles\", dataToUpload)\r\n            .then((suc) => console.log(suc))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    const previewImage = (index: number) => {\r\n        if (index === preview.index) return 0\r\n        const reader = new FileReader()\r\n        reader.addEventListener(\r\n            \"load\",\r\n            () => {\r\n                if (reader.result) {\r\n                    setPreview({ index: index, src: reader.result })\r\n                }\r\n            },\r\n            false\r\n        )\r\n\r\n        if (selectedFiles) {\r\n            reader.readAsDataURL(selectedFiles[index])\r\n        }\r\n    }\r\n\r\n    let type = props.data.type\r\n\r\n    return (\r\n        <>\r\n            <ModalWrapper\r\n                isDisplay={display}\r\n                onDragOver={dragOver}\r\n                onDragEnter={dragEnter}\r\n                onDragLeave={dragLeave}\r\n                onDrop={fileDrop}>\r\n                {props.data.type == \"modal\" ? (\r\n                    <Bcg\r\n                        style={{ display: props.data.type == \"modal\" ? \"auto\" : \"none\" }}\r\n                        onClick={() => {\r\n                            setDisplay(false)\r\n                        }}></Bcg>\r\n                ) : null}\r\n\r\n                {/* File preview can be transformed into another module TBH and can handle multiple types of files */}\r\n                <FilePreviewComponent {...{ preview, setPreview, previewImage, selectedFiles }}></FilePreviewComponent>\r\n                <ModalBodyComponent\r\n                    {...{\r\n                        openFileBrowser,\r\n                        fileInput,\r\n                        fileInputDOM,\r\n                        selectedFiles,\r\n                        previewImage,\r\n                        deleteFile,\r\n                        uploadHandler,\r\n                        setDisplay,\r\n                        type,\r\n                    }}></ModalBodyComponent>\r\n            </ModalWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UploadModal\r\n","C:\\Users\\daniel.maliszewski\\Desktop\\Programming\\tbd-frontend\\src\\components\\UploadInlineBlock.tsx",["106","107"],"import { useState, useRef, useEffect } from \"react\"\r\nimport axios from \"axios\"\r\nimport styled from \"styled-components\"\r\nimport upload from \"../assets/img/upload.svg\"\r\nimport cross from \"../assets/img/cross.svg\"\r\n\r\nconst FilePreviewWrapper = styled.div`\r\n    display: none;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    z-index: 1000;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    flex-direction: row;\r\n\r\n    & > div > .previewArrow {\r\n        clip-path: polygon(25% 0, 100% 50%, 25% 100%, 0% 100%, 75% 50%, 0% 0%);\r\n        z-index: 1100;\r\n        background-color: white;\r\n        width: 28px;\r\n        height: 50px;\r\n        transition: all 0.1s;\r\n    }\r\n\r\n    & > div > .previewArrow:hover {\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    & > .previewArrowBcg {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 50px;\r\n        height: 60px;\r\n        margin-left: 50px;\r\n        margin-right: 50px;\r\n        cursor: pointer;\r\n    }\r\n`\r\nconst PreviewBcg = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    z-index: -10;\r\n`\r\n\r\nconst FilePreview = styled.img`\r\n    max-width: 60%;\r\n    max-height: 80%;\r\n`\r\n\r\nconst ModalBody = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n`\r\nconst ModalInput = styled.div`\r\n    width: 100%;\r\n    height: 250px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    transition: all 0.2s;\r\n    &:hover {\r\n        cursor: pointer;\r\n        background-color: whitesmoke;\r\n    }\r\n`\r\nconst FileInput = styled.input`\r\n    display: none;\r\n    width: 100%;\r\n    height: 100%;\r\n`\r\n\r\nconst ModalList = styled.div`\r\n    width: 98%;\r\n`\r\n\r\nconst SelectedFile = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    & > p:hover {\r\n        color: blue;\r\n        cursor: pointer;\r\n        text-decoration: underline;\r\n    }\r\n\r\n    & > div {\r\n        width: 11px;\r\n        height: 11px;\r\n        cursor: pointer;\r\n    }\r\n\r\n    & > div:hover {\r\n        cursor: pointer;\r\n    }\r\n\r\n    & > div > img:active {\r\n        color: red;\r\n    }\r\n`\r\n\r\ntype PropsType = {\r\n    data: {\r\n        height: string\r\n        width: string\r\n    }\r\n    selectedFiles: any\r\n    setSelectedFiles: any\r\n    preview: any\r\n    setPreview: any\r\n}\r\n\r\nconst UploadBlock = (props: PropsType) => {\r\n    const fileInputDOM = useRef<HTMLInputElement>(null)\r\n    const filePreviewWrapper = useRef<HTMLDivElement>(null)\r\n    useEffect(() => {\r\n        if (filePreviewWrapper && filePreviewWrapper.current) {\r\n            filePreviewWrapper.current.style.top = window.pageYOffset + \"px\"\r\n            console.log(filePreviewWrapper.current.scrollTop, window.pageYOffset)\r\n        }\r\n    }, [props.preview])\r\n\r\n    const dragOver = (e: any) => {\r\n        e.preventDefault()\r\n        if (e.target.tagName === \"DIV\" && !e.target.style.boxShadow)\r\n            e.target.style.boxShadow = \"inset 0 0 5px 0 rgba(0,0,0,0.6)\"\r\n    }\r\n\r\n    const dragEnter = (e: any) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    const dragLeave = (e: any) => {\r\n        e.preventDefault()\r\n        e.target.style.boxShadow = null\r\n    }\r\n\r\n    const fileDrop = (e: any) => {\r\n        if (!e.fromFileBrowser) e.target.style.boxShadow = null\r\n        e.preventDefault()\r\n        const files = [...e.dataTransfer.files].concat(props.selectedFiles)\r\n        const flags = new Set()\r\n        const output = files.filter((e) => {\r\n            if (flags.has(e.name)) {\r\n                return false\r\n            }\r\n            flags.add(e.name)\r\n            return true\r\n        })\r\n\r\n        props.setSelectedFiles(output)\r\n    }\r\n\r\n    const deleteFile = (index: number) => {\r\n        const files = props.selectedFiles\r\n        files.splice(index, 1)\r\n        props.setSelectedFiles([...files])\r\n    }\r\n\r\n    const openFileBrowser = () => {\r\n        if (fileInputDOM && fileInputDOM.current) {\r\n            fileInputDOM.current.click()\r\n        }\r\n    }\r\n\r\n    const fileInput = (e: any) => {\r\n        fileDrop({\r\n            dataTransfer: e.target,\r\n            preventDefault: function () {\r\n                return null\r\n            },\r\n            fromFileBrowser: true,\r\n        })\r\n    }\r\n\r\n    const previewImage = (index: number) => {\r\n        document.body.style.overflow = \"hidden\"\r\n\r\n        if (index === props.preview.index) return 0\r\n        const reader = new FileReader()\r\n        reader.addEventListener(\r\n            \"load\",\r\n            () => {\r\n                if (reader.result) {\r\n                    props.setPreview({ index: index, src: reader.result })\r\n                }\r\n            },\r\n            false\r\n        )\r\n\r\n        if (props.selectedFiles) {\r\n            reader.readAsDataURL(props.selectedFiles[index])\r\n        }\r\n    }\r\n    const disablePreview = () => {\r\n        props.setPreview({ index: null, src: null })\r\n        document.body.style.overflow = \"auto\"\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FilePreviewWrapper style={{ display: props.preview.src ? \"flex\" : \"none\" }} ref={filePreviewWrapper}>\r\n                <PreviewBcg onClick={disablePreview}></PreviewBcg>\r\n                <div\r\n                    className={\"previewArrowBcg\"}\r\n                    onClick={() =>\r\n                        props.preview.index - 1 < 0\r\n                            ? previewImage(props.selectedFiles.length - 1)\r\n                            : previewImage(props.preview.index - 1)\r\n                    }>\r\n                    <div className={\"previewArrow\"} style={{ transform: \"rotate(180deg)\" }}></div>\r\n                </div>\r\n                <FilePreview src={props.preview.src}></FilePreview>\r\n                <div\r\n                    className={\"previewArrowBcg\"}\r\n                    onClick={() =>\r\n                        props.preview.index + 1 > props.selectedFiles.length - 1\r\n                            ? previewImage(0)\r\n                            : previewImage(props.preview.index + 1)\r\n                    }>\r\n                    <div className={\"previewArrow\"}></div>\r\n                </div>\r\n            </FilePreviewWrapper>\r\n            <ModalBody style={{ width: props.data.width, minHeight: props.data.height }}>\r\n                <ModalInput\r\n                    onClick={openFileBrowser}\r\n                    onDragOver={dragOver}\r\n                    onDragEnter={dragEnter}\r\n                    onDragLeave={dragLeave}\r\n                    onDrop={fileDrop}>\r\n                    <FileInput type={\"file\"} ref={fileInputDOM} onChange={fileInput} multiple></FileInput>\r\n                    <img alt={\"\"} src={upload} width={\"60px\"} style={{ marginBottom: \"5px\", marginTop: \"20px\" }}></img>\r\n                    <p>Drag and drop your files here</p>\r\n                </ModalInput>\r\n                <ModalList>\r\n                    {props.selectedFiles.map((e: any, i: number) => {\r\n                        return (\r\n                            <SelectedFile key={i}>\r\n                                <p\r\n                                    onClick={() => {\r\n                                        previewImage(i)\r\n                                    }}>\r\n                                    {e.name}\r\n                                </p>\r\n                                <div\r\n                                    onClick={() => {\r\n                                        deleteFile(i)\r\n                                    }}>\r\n                                    <img alt={\"\"} src={cross} width={\"11px\"}></img>\r\n                                </div>\r\n                            </SelectedFile>\r\n                        )\r\n                    })}\r\n                </ModalList>\r\n            </ModalBody>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UploadBlock\r\n",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":13,"column":7,"nodeType":"114","messageId":"115","endLine":13,"endColumn":12},{"ruleId":"112","severity":1,"message":"116","line":23,"column":7,"nodeType":"114","messageId":"115","endLine":23,"endColumn":16},{"ruleId":"112","severity":1,"message":"117","line":31,"column":7,"nodeType":"114","messageId":"115","endLine":31,"endColumn":23},{"ruleId":"112","severity":1,"message":"118","line":36,"column":11,"nodeType":"114","messageId":"115","endLine":36,"endColumn":15},{"ruleId":"112","severity":1,"message":"119","line":5,"column":8,"nodeType":"114","messageId":"115","endLine":5,"endColumn":13},{"ruleId":"112","severity":1,"message":"120","line":22,"column":17,"nodeType":"114","messageId":"115","endLine":22,"endColumn":26},{"ruleId":"112","severity":1,"message":"121","line":6,"column":20,"nodeType":"114","messageId":"115","endLine":6,"endColumn":26},{"ruleId":"122","severity":1,"message":"123","line":130,"column":11,"nodeType":"114","messageId":"124","endLine":130,"endColumn":18},{"ruleId":"112","severity":1,"message":"125","line":141,"column":23,"nodeType":"114","messageId":"115","endLine":141,"endColumn":31},{"ruleId":"126","severity":1,"message":"127","line":150,"column":20,"nodeType":"128","messageId":"129","endLine":150,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":268,"column":46,"nodeType":"128","messageId":"129","endLine":268,"endColumn":48},{"ruleId":"126","severity":1,"message":"127","line":376,"column":34,"nodeType":"128","messageId":"129","endLine":376,"endColumn":36},{"ruleId":"126","severity":1,"message":"127","line":378,"column":59,"nodeType":"128","messageId":"129","endLine":378,"endColumn":61},{"ruleId":"112","severity":1,"message":"130","line":1,"column":10,"nodeType":"114","messageId":"115","endLine":1,"endColumn":18},{"ruleId":"112","severity":1,"message":"119","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":13},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"@typescript-eslint/no-unused-vars","'Label' is assigned a value but never used.","Identifier","unusedVar","'Accordion' is assigned a value but never used.","'AccordionWrapper' is assigned a value but never used.","'test' is assigned a value but never used.","'axios' is defined but never used.","'setOffers' is assigned a value but never used.","'useRef' is defined but never used.","@typescript-eslint/no-redeclare","'Section' is already defined.","redeclared","'setValue' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]